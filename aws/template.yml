AWSTemplateFormatVersion: "2010-09-09"

# on-prem pokes the IncomingInterfaceApi
# which calls the IncomingTriggerFunction
# which puts a message on the CloudToEdgeQueue
# edge pulls from that queue, checks the situation and pokes the NotificationFunction directly
# the NotificationFunction then pokes ifttt to send the notification

Parameters:
  CodeVersionFunctions:
    Type: String
  Revision:
    Type: String
  IftttKey:
    Type: String

Resources: 

  # incoming gateway
  
  ApiExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        - !Ref ApiExecutionPolicy
  
  ApiExecutionPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "lambda:InvokeFunction"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-incoming-trigger-function"
  
  IncomingInterfaceApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body: 
        openapi: "3.0.1"
        info:
          title: !Sub "${AWS::StackName}-notification-trigger"
        paths:
          /home-alarm-notification-trigger:
            get:
              responses:
                default:
                  description: "Default response for GET /home-alarm-notification-trigger"
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiExecutionRole.Arn
                payloadFormatVersion: "1.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-incoming-trigger-function/invocations" #would be better to pull the arn from the lambda resource, but that causes a circular dependency
                connectionType: "INTERNET"
        x-amazon-apigateway-importexport-version: "1.0"

  IncomingInterfaceDeployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    Properties:
      ApiId: !Ref IncomingInterfaceApi
  
  IncomingInterfaceStage: 
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      ApiId: !Ref IncomingInterfaceApi
      DeploymentId: !Ref IncomingInterfaceDeployment
      AutoDeploy: true

  # incoming function

  IncomingTriggerFunctionLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-incoming-trigger-function"
      RetentionInDays: 120

  IncomingTriggerFunctionExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref IncomingTriggerFunctionExecutionPolicy

  IncomingTriggerFunctionExecutionPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt IncomingTriggerFunctionLogGroup.Arn
          - 
            Effect: "Allow"
            Action: 
              - "sqs:SendMessage"
            Resource: !GetAtt CloudToEdgeQueue.Arn

  IncomingTriggerFunction: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-incoming-trigger-function"
      Handler: main.incomingTriggerHandler
      Role: !GetAtt IncomingTriggerFunctionExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 20
      MemorySize: 128
      Environment:
        Variables:
          QUEUE_URL: !Ref CloudToEdgeQueue
      Code: 
        S3Bucket: !Sub "cloudformation-code-deploy-staging-${AWS::AccountId}"
        S3Key: !Sub "${AWS::StackName}/functions/code.zip"
        S3ObjectVersion: !Ref CodeVersionFunctions
      Tags: 
        - Key: revision
          Value: !Ref Revision

  # queue that links the incoming trigger with the edge processing node

  CloudToEdgeQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: !Sub "${AWS::StackName}-CloudToEdgeQueue.fifo"
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 0 # why are we not using long polling?
      VisibilityTimeout: 60

  # function that listens to trigger requests from edge processing and triggers ifttt

  NotificationFunctionLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-notification-function"
      RetentionInDays: 120

  NotificationFunctionExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref NotificationFunctionExecutionPolicy

  NotificationFunctionExecutionPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt NotificationFunctionLogGroup.Arn

  NotificationFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${AWS::StackName}-notification-function"
      Handler: main.notificationHandler
      Role: !GetAtt NotificationFunctionExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 20
      MemorySize: 128
      Environment:
        Variables:
          IFTTT_KEY: !Ref IftttKey
      Code: 
        S3Bucket: !Sub "cloudformation-code-deploy-staging-${AWS::AccountId}"
        S3Key: !Sub "${AWS::StackName}/functions/code.zip"
        S3ObjectVersion: !Ref CodeVersionFunctions
      Tags: 
        - Key: revision
          Value: !Ref Revision

  # edge processing role

  EdgeProcessingUser: 
    Type: "AWS::IAM::User"
    Properties: 
      ManagedPolicyArns: 
        - !Ref EdgeProcessingPolicy

  EdgeProcessingPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
            Resource:
              - !GetAtt CloudToEdgeQueue.Arn
          - 
            Effect: "Allow"
            Action: 
              - "lambda:InvokeFunction"
            Resource:
              - !GetAtt NotificationFunction.Arn

Outputs:
  AccessUrl:
    Value: !Sub "https://${IncomingInterfaceApi}.execute-api.${AWS::Region}.amazonaws.com/home-alarm-notification-trigger"
  GoHere: 
    Value: !Sub "Now create api tokens for ${EdgeProcessingUser}: https://console.aws.amazon.com/iam/home#/users/${EdgeProcessingUser}?section=security_credentials"
